title: Xcode build for simulator
summary: Runs Xcode Build command for simulators.
description: |
  This Step runs the `xcodebuild` command to build and deploy your iOS, tvOS, or watchOS for a simulator. You can use this to show off your app in a browser, for example. 
  The Step generates the following outputs:
  * `BITRISE_APP_DIR_PATH`: the path to the generated `.app` file.
  * `BITRISE_APP_DIR_PATH_LIST`: the path to the generated `.app` file and the paths to every dependent target app. The paths are separated with the `|` character.
  * `BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH`: the path to the log file of the raw build results.
  
  The Step also creates an `.xctestrun` file which you can use to run tests.

  ### Configuring the Step

  Before you start:

  Make sure to include this Step after the Steps that install the necessary dependencies such as **Run Cocoapods Install** in your Workflow. 

  To configure the Step:

  1. **Project (or Workspace) path**: The path to your project's `.xcodeproj` or `.xworkspace` file. By default, this is stored in an Environment Variable when you add your app to Bitrise.
  1. **Scheme name**: The Xcode Scheme of your project. This is stored in an Environment Variable by default when you add your app to Bitrise.
  1. **Device model**: The type of device you want to run the app on. Set it exactly as it appears in the device selection menu in Xcode.
  1. **OS version**: The version of device operating system you want to run the app on. Set it exactly as it appears in the device selection menu in Xcode. The default value is latest.
  1. **Platform**: The platform you want to run the app on. The default value is `iOS`. Make sure that the values of the **Device model** input and the **Platform** input are compatible: for example, if you set **Device model** to `Apple TV 1080p`, set **Platform** to `tvOS`.
  1. **Configuration name**: By default, your Scheme's archive action defines which configuration is used, but you can overwrite it with this option. Ensure that the Configuration you specify exists in your Xcode Project; otherwise, this input will be ignored. 
  1. **Disable indexing during the build**: By setting this input to `no`, you can disable indexing during the build, which can speed up your build time.
  1. **Enable caching of Swift Package Manager packages**: To disable caching swift package, set this input to `none`.

  Under **Debug**:
  
  1. **Additional options for xcodebuild call**: You can add additional options to the end of the xcodebuild call. For example, `-xcconfig PATH -verbose`.
  1. **Working directory**: If you would like to change the working directory of the Step, you can do so with this input.
  1. **Output directory path**: You can change the output directory, which will contain the generated `.app` artifacts with this input.
  1. **Do a clean Xcode build before the build?**: Set this input to `yes` to do a clean Xcode build before the build. 
  1. **Output tool**: You can set this input to `xcpretty` to prettify your output. If you set it to `xcodebuild`, the raw xcodebuild output will be printed. 
  1. **Enable verbose logging?**: Set this input to `yes` if you want to enable verbose logs.

  ### Useful links

  * [Deploying an iOS app for simulators](https://devcenter.bitrise.io/en/deploying/ios-deployment/deploying-an-ios-app-for-simulators.html)

  ### Related Steps

  * [Xcode build for testing for iOS]https://www.bitrise.io/integrations/steps/xcode-build-for-test
  * [Appetize.io deploy]https://www.bitrise.io/integrations/steps/appetize-deploy 

website: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator
source_code_url: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator
support_url: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator/issues

project_type_tags:
  - ios
  - react-native
  - cordova
  - ionic
type_tags:
  - build

deps:
  check_only:
  - name: xcode
  brew:
  - name: go
  apt_get:
  - name: go

toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-build-for-simulator

inputs:
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Project (or Workspace) path
      summary: "A `.xcodeproj` or `.xcworkspace` path."
      description: "A `.xcodeproj` or `.xcworkspace` path."
      is_required: "true"
  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme name
      summary: "The Scheme to use."
      description: "The Scheme to use."
      is_required: "true"
  - simulator_device: iPhone 8 Plus
    opts:
      title: "Device model"
      description: |-
        Set it exactly as it appears in the device selection menu in Xcode's device selection dropdown UI.

        A couple of examples (the
        actual available options depend on which versions
        are installed):

        * iPhone 8 Plus
        * iPhone Xs Max
        * iPad Air (3rd generation)
        * iPad Pro (12.9-inch) (3rd generation)
        * Apple TV 4K (don't forget to set the platform to `tvOS Simulator` to use this option!)
      is_required: "true"
  - simulator_os_version: "latest"
    opts:
      title: OS version
      description: |-
        Set it exactly as it appears in
        Xcode's device selection dropdown UI.

        A couple of format examples (the
        actual available options depend on which versions
        are installed):

        * "8.4"
        * latest
      is_required: "true"
  - simulator_platform: iOS
    opts:
      title: Platform
      description: |-
        Set it exactly as it appears in Xcode's device selection dropdown UI.

        A couple of examples (the
        actual available options depend on which versions
        are installed):

        * iOS Simulator
        * tvOS Simulator
      value_options:
      - iOS
      - tvOS
      is_required: "true"
  - configuration:
    opts:
      title: "Configuration name"
      description: |-
        (Optional) The configuration to use. By default your Scheme's archive action
        defines which configuration (Debug, Release, ...) should be used,
        but you can overwrite it with this option.

        **Make sure that the Configuration you specify actually exists
        in your Xcode Project**. If it does not, if you have a typo
        in the value of this input Xcode will simply use the Configuration
        specified by the Scheme and will silently ignore this parameter!
  - disable_index_while_building: "yes"
    opts:
      title: Disable indexing during the build
      summary: Could make the build faster by disabling the indexing during the build run.
      description: |-
        Could make the build faster by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command which will disable the indexing during the build.

        Indexing is needed for
        
        * Autocomplete
        * Ability to quickly jump to definition
        * Get class and method help by alt clicking.

        Which are not needed in CI environment.

        **Note:** In Xcode you can turn off the `Index-WhileBuilding` feature  by disabling the `Enable Index-WhileBuilding Functionality` in the `Build Settings`.<br/>
        In CI environment you can disable it by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command.
      value_options:
        - "yes"
        - "no"
  - cache_level: swift_packages
    opts:
      title: Enable caching of Swift Package Manager packages
      description: |-
        Available options:
        - `none` : Disable caching
        - `swift_packages` : Cache Swift PM packages added to the Xcode project
      value_options:
      - "none"
      - "swift_packages"
      is_required: true
  - xcodebuild_options: ""
    opts:
      category: Debug
      title: Additional options for xcodebuild call
      description: |-
        Options added to the end of the xcodebuild call.

        You can use multiple options, separated by a space
        character. Example: `-xcconfig PATH -verbose`
  - workdir: $BITRISE_SOURCE_DIR
    opts:
      category: Debug
      title: Working directory
      summary: ""
      description: |-
        Working directory of the Step.
        You can leave it empty to don't change it.
  - output_dir: $BITRISE_DEPLOY_DIR
    opts:
      category: Debug
      title: Output directory path
      summary: ""
      description: |-
        This directory will contain the generated .app artifacts.
      is_required: "true"
  - is_clean_build: "no"
    opts:
      category: Debug
      title: Do a clean Xcode build before the build?
      value_options:
        - "yes"
        - "no"
      is_required: "true"
  - output_tool: xcpretty
    opts:
      category: Debug
      title: Output tool
      description: |-
        If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
        If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
      value_options:
      - xcpretty
      - xcodebuild
      is_required: "true"
      is_expand: "false"
  - verbose_log: "no"
    opts:
      category: Debug
      title: Enable verbose logging?
      description: Enable verbose logging?
      is_required: "true"
      value_options:
      - "yes"
      - "no"

outputs:
  - BITRISE_APP_DIR_PATH:
    opts:
      title: The generated (and copied) app directory
  - BITRISE_APP_DIR_PATH_LIST:
    opts:
      title: List of the generated app paths
      summary: "List of the generated (and copied) app paths"
      description: |-
        This output will include the main target app's path + every dependent target's app path.


        The paths are separated with `|` character, eg: `/deploy109787178/sample-apps-ios-workspace-swift.app|/deploy109787178/bitfall.sample-apps-ios-workspace-swift-watch.app`
  - BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH:
    opts:
      title: The full, raw build output file path
      description: |-
        This is the path of the raw build results log file.

        If `output_tool=xcpretty` and the build fails this log will contain the build output.
