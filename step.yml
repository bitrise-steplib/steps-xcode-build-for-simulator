title: Xcode Build for Simulator
summary: Runs `xcodebuild` commands for simulators
description: |
  This Step runs the `xcodebuild` command to build and deploy an app to an iOS, tvOS, or watchOS simulator. You can use this to perform quick tests of your app, or to show it off in a browser to your clients.

  The Step generates the following outputs:

  - `BITRISE_APP_DIR_PATH`: The path to the generated `.app` file.
  - `BITRISE_APP_DIR_PATH_LIST`: The path to the generated `.app` file, and the paths to every dependent target app.
    - Paths are separated by the `|` (pipe) cahracter.
  - `BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH`: The path to the raw log file for the build.

  The Step also creates an `.xctestrun` file which you can use to run tests.

  Make sure to include this Step after the Steps that install the necessary dependencies — such as _Run Cocoapods Install_ — in your Workflow.

  ### Configuring the Step

  Minimum configuration:

  1. In the **Project (or Workspace) Path** input, enter the path to your Xcode Project or Workspace.
    - Only necessary if you plan to use a different scheme than the one set in the `BITRISE_PROJECT_PATH` Environment Variable.
  1. In the **Scheme Name** input, enter the name of the Scheme you'd like to use for building your project.
    - Only necessary if you plan to use a different scheme than the one set in the `BITRISE_SCHEME` Environment Variable.

  See the descriptions of the other inputs below for more configuration options.

  ### Useful Links

  - [Deploying an iOS app for simulators](https://devcenter.bitrise.io/en/deploying/ios-deployment/deploying-an-ios-app-for-simulators.html)

  ### Related Steps

  - [Xcode build for testing for iOS](https://www.bitrise.io/integrations/steps/xcode-build-for-test)
  - [Appetize.io deploy](https://www.bitrise.io/integrations/steps/appetize-deploy)

website: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator
source_code_url: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator
support_url: https://github.com/bitrise-steplib/steps-xcode-build-for-simulator/issues

project_type_tags:
  - ios
  - react-native
  - cordova
  - ionic
type_tags:
  - build

deps:
  check_only:
  - name: xcode
  brew:
  - name: go
  apt_get:
  - name: go

toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-build-for-simulator

inputs:
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Project (or Workspace) Path
      summary: The path to your project's `.xcodeproj` or `.xcworkspace`
      description: The path to your project's `.xcodeproj` or `.xcworkspace`
      is_required: "true"
  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme Name
      summary: The name of the Xcode Scheme to use when building your project
      description: The name of the Xcode Scheme to use when building your project
      is_required: "true"
  - simulator_device: iPhone 8 Plus
    opts:
      title: Device Model
      description: |-
        Set this exactly as it appears in the device selection menu in Xcode's device selection UI.

        A couple of examples (the actual available options depend on which versions are installed):

        * iPhone 8 Plus
        * iPhone Xs Max
        * iPad Air (3rd generation)
        * iPad Pro (12.9-inch) (3rd generation)
        * Apple TV 4K
        
        Don't forget to set the platform to `tvOS Simulator` in order to use an Apple TV simulator.
      is_required: "true"
  - simulator_os_version: latest
    opts:
      title: OS Version
      description: |-
        Set this exactly as it appears in Xcode's device selection UI.

        A couple of format examples (the actual available options depend on which versions are installed):

        * "8.4"
        * latest
      is_required: "true"
  - simulator_platform: iOS
    opts:
      title: Platform
      description: |-
        Set this exactly as it appears in Xcode's device selection UI.

        A couple of examples (the actual available options depend on which versions are installed):

        * iOS Simulator
        * tvOS Simulator
      value_options:
      - iOS
      - tvOS
      is_required: "true"
  - configuration:
    opts:
      title: "Configuration Name"
      description: |-
        (Optional) The name of the Xcode Configuration to use (Debug, Release, etc.). By default your Scheme's archive action defines which Configuration should be used, but this can be overridden it with this option.

        **If the Configuration specified in this input does not exist in your project, the Step will silently ignore the value, and fall back to using the Configuration specified in the Scheme.**
  - disable_index_while_building: "yes"
    opts:
      title: Disable Indexing During the Build
      summary: This may speed up builds by skipping indexing while building.
      description: |-
        When this input is enabled, `COMPILER_INDEX_STORE_ENABLE=NO` is added to the `xcodebuild` command, which disables indexing while building. Disabling this could speed up your builds by eliminating a (normally) unnecessary step.

        Indexing is useful for certain editor features — like autocompletion, jump to definition, and code information lookup — but these features are generally not necessary in a CI environment.
      value_options:
        - "yes"
        - "no"
  - code_signing_allowed: "no"
    opts:
      title: Code Signing Allowed
      description: |-
        When building an app for the simulator, code signing is not required and is set to "no" by default.

        On rare occasions, you may need to set the flag to "yes" — usually when working with certain test cases or third-party dependencies.
      value_options:
        - "yes"
        - "no"
  - cache_level: swift_packages
    opts:
      title: Enable Caching of Swift Package Manager Packages
      description: |-
        Available options:

        - `none`: Disable caching
        - `swift_packages`: Cache Swift Package Manager packages added to the Xcode project
      value_options:
      - "none"
      - "swift_packages"
      is_required: true
  - xcodebuild_options: ""
    opts:
      category: Debug
      title: Additional `xcodebuild` Options
      description: |-
        Additional options to be added to the `xcodebuild` call.

        You can include multiple options, separated by a " " (space) character. (Example: `-xcconfig PATH -verbose`)
  - workdir: $BITRISE_SOURCE_DIR
    opts:
      category: Debug
      title: Working Directory
      summary: The working directory of the Step
      description: The working directory of the Step
  - output_dir: $BITRISE_DEPLOY_DIR
    opts:
      category: Debug
      title: Output Directory Path
      summary: The directory in which to place generated `.app` artifacts
      description: The directory in which to place generated `.app` artifacts
      is_required: "true"
  - is_clean_build: "no"
    opts:
      category: Debug
      title: Do a Clean Xcode Build Before the Build?
      value_options:
        - "yes"
        - "no"
      is_required: "true"
  - output_tool: xcpretty
    opts:
      category: Debug
      title: Output Tool
      Summary: The tool to use for log output
      description: |-
        Available options:
        
        - `xcpretty`: `xcodebuild` log output will be prettified using `xcpretty`
        - `xcodebuild`: The raw `xcodebuild` output will be printed

        Note: `xcodebuild` will be used as a fallback option if there are issues when attempting to use `xcpretty`.
      value_options:
      - xcpretty
      - xcodebuild
      is_required: "true"
      is_expand: "false"
  - verbose_log: "no"
    opts:
      category: Debug
      title: Verbose Logging
      description: Whether or not to enable verbose logging for this Step.
      is_required: "true"
      value_options:
      - "yes"
      - "no"

outputs:
  - BITRISE_APP_DIR_PATH:
    opts:
      title: Generated (and Copied) App Directory
  - BITRISE_APP_DIR_PATH_LIST:
    opts:
      title: List of the Generated App Paths
      summary: List of the generated (and copied) app paths
      description: |-
        This output will include the main target app's path, plus every dependent target's app path.

        The paths are separated by a `|` (pipe) character. (Example: `/deploy109787178/sample-apps-ios-workspace-swift.app|/deploy109787178/bitfall.sample-apps-ios-workspace-swift-watch.app`)
  - BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH:
    opts:
      title: Full Raw Build Output File Path
      description: |-
        This is the path to the raw build results log file.

        If `output_tool` is set to `xcpretty` and the build fails, this log will contain the build output.
